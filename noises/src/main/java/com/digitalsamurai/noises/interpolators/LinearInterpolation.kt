package com.digitalsamurai.noises.interpolators


/**
 * Линейная интерполяция
 * Одномерная интерполяция, позволяющая получить интерполируемое значение на прямой
 *
 * Фактически сводится к тому, что мы строим прямую линию и на ней берем любое значение от X, получая значение Y (Y это и есть наше интерполируемое значение)
 *
 * В андроиде на этой механики работает [android.view.animation.LinearInterpolator] как раз таки, только он интерполирует по времени [android.animation.TimeInterpolator]
 * (берет 0 за начало и длительность анимации за конец. Ты реализовываешь функцию преобразования времени Float в нужное тебе значение, которое будет являться значением анимации)
 * Фактически 0x ось это время, 0y ось это значение анимации
 *
 * @param x искомая точка для интерполяции
 * @param функция преобразования [x] в значение интерполяции
 * @return значение линейной интерполяции на прямой (так как интерполяция линейная)
 */
public fun linearInterpolation(x : Float, fX: (x: Float) -> Float): Float {
    // у нас есть точка Х, по ней нужно найти интерполируемое значение Y и вернуть его

    // Для этого нам сначала надо построить прямую, основываясь на функции fX(), которая возвращает Y по значению X

    // Берем две точки
    val x1 = 0f
    val y1 = fX(x1)
    val x2 = 1f
    val y2 = fX(x2)
    // формула прямой по двум точкам:
    // (y1 - y2)x + (x2-x1)y + (x1y2 -x2y1) = 0
    // нам надо найти Y, поэтому преобразовываем и получаем
    // y = ((x - x1)(y2 - y1)) / (x2 - x1) + y1

    return ((x - x1) * (y2 - y1)) / (x2 - x1) + y1
}
