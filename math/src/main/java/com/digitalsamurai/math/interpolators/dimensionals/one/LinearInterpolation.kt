package com.digitalsamurai.math.interpolators.dimensionals.one

import com.digitalsamurai.math.data.D2Point


/**
 * Линейная интерполяция
 * Одномерная интерполяция, позволяющая получить интерполируемое значение на прямой
 *
 * Фактически сводится к тому, что мы строим отрезок и берем на нем искомую точку. В
 *
 * В андроиде на этой механике линейной интерполяции работает [android.view.animation.LinearInterpolator] как раз таки, только он интерполирует по времени [android.animation.TimeInterpolator]
 * (берет 0 за начало и длительность анимации за конец. Ты реализовываешь функцию преобразования времени Float в нужное тебе значение, которое будет являться значением анимации, а он его скейлит до нужного отрезка)
 * Фактически 0x ось это время, 0y ось это значение анимации
 *
 * Тут мы берем формулу прямой по двум точкам, вместо отрезка, хотя по логике вещей мы должны взять две точки (aka начало и конец интерполяции) и [x] как текущую позицию интерполяции
 *
 * @param x искомая точка для интерполяции
 * @param point1 первая точка для построения отрезка
 * @param point2 вторая точка для построения отрезка
 * @return значение линейной интерполяции на прямой (так как интерполяция линейная)
 */
internal fun linearInterpolation(x : Float, point1: D2Point, point2: D2Point): Float {
    // у нас есть точка Х, по ней нужно найти интерполируемое значение Y и вернуть его

    // Для этого нам сначала надо построить прямую, основываясь на функции fX(), которая возвращает Y по значению X

    // формула прямой по двум точкам:
    // (y1 - y2)x + (x2-x1)y + (x1y2 -x2y1) = 0
    // нам надо найти Y, поэтому преобразовываем и получаем
    // y = ((x - x1)(y2 - y1)) / (x2 - x1) + y1

    return  point1.y + ((x - point1.x) * (point2.y - point1.y)) / (point2.x - point1.x)
}
